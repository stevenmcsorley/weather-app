{
  "version": 3,
  "sources": ["../../../app/routes/createPost.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/createPost.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/createPost.tsx\");\n  import.meta.hot.lastModified = \"1721272628631.482\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { Form, useActionData, useNavigation } from \"@remix-run/react\";\nimport { Container, Grid, Card, CardContent, Typography, TextField, Button } from \"@mui/material\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport data from \"../data.json\";\nexport async function action({\n  request\n}) {\n  await fakeDelay(15000);\n  const body = await request.formData();\n  const title = body.get(\"title\");\n  const content = body.get(\"content\");\n  const slug = body.get(\"slug\");\n  const userid = body.get(\"userid\");\n  const author = \"Jon Snow\";\n  const createdAt = new Date().toISOString();\n  const id = data.length + 1;\n  const errors = {};\n  if (!title || title == null || title == \"\") {\n    errors.title = \"Title is required\";\n  }\n  if (!content || content == null || content == \"\") {\n    errors.content = \"Content is required\";\n  }\n  if (!slug || slug == null || slug == \"\") {\n    errors.slug = \"Slug is required\";\n  }\n  if (!userid || userid == null || userid == \"\") {\n    errors.userid = \"User Id is required\";\n  }\n  if (Object.keys(errors).length > 0) {\n    return json({\n      errors\n    });\n  }\n  const newPost = {\n    id: id,\n    title: title,\n    content: content,\n    slug: slug,\n    userid: userid,\n    author: author,\n    date: createdAt\n  };\n  const newData = [...data, newPost];\n  try {\n    console.log(\"Writing to file\");\n    const filePath = path.join(process.cwd(), \"app\", \"data.json\");\n    fs.writeFileSync(filePath, JSON.stringify(newData, null, 2));\n  } catch (error) {\n    console.error(error);\n  }\n  return json({\n    success: true\n  });\n  // return redirect(\"/posts\");\n}\nfunction fakeDelay(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\nfunction spinner() {\n  return <div>\r\n      <h1>Submitting...</h1>\r\n    </div>;\n}\nexport default function CreatePost() {\n  _s();\n  const actionData = useActionData();\n  // console.log(actionData);\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const navigation = useNavigation();\n  return <Container>\r\n      <Grid container spacing={4} justifyContent=\"center\">\r\n        <Grid item xs={12} md={8}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h5\" component=\"div\">\r\n                Create Post\r\n              </Typography>\r\n              <Form method=\"post\">\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField fullWidth label=\"User Id\" type=\"number\" id=\"userid\" name=\"userid\" variant=\"outlined\" />\r\n                    {actionData?.errors?.userid && <Typography color=\"error\">\r\n                        {actionData.errors.userid ? actionData.errors.userid : null}\r\n                      </Typography>}\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12}>\r\n                    <TextField fullWidth label=\"slug\" type=\"text\" id=\"slug\" name=\"slug\" variant=\"outlined\" required />\r\n                    {actionData?.errors?.slug && <Typography color=\"error\">\r\n                        {actionData.errors.slug ? actionData.errors.slug : null}\r\n                      </Typography>}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField fullWidth label=\"Title\" type=\"text\" id=\"title\" name=\"title\" variant=\"outlined\" />\r\n                    {actionData?.errors?.title && <Typography color=\"error\">\r\n                        {actionData.errors.title ? actionData.errors.title : null}\r\n                      </Typography>}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField fullWidth label=\"Content\" multiline rows={4} id=\"content\" name=\"content\" variant=\"outlined\" />\r\n                    {actionData?.errors?.content && <Typography color=\"error\">\r\n                        {actionData.errors.content ? actionData.errors.content : null}\r\n                      </Typography>}\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\" style={{\n                    display: navigation.state === \"submitting\" ? \"none\" : \"block\"\n                  }}>\r\n                      Create Post\r\n                    </Button>\r\n                    {navigation.state === \"submitting\" ? spinner() : null}\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>;\n}\n_s(CreatePost, \"e3rMULficn7ldQYYArv00m53mwQ=\", false, function () {\n  return [useActionData, useNavigation];\n});\n_c = CreatePost;\nvar _c;\n$RefreshReg$(_c, \"CreatePost\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["_c"]
}
