{
  "version": 3,
  "sources": ["../../../app/components/Post.tsx", "../../../app/routes/posts.$slug.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Post.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Post.tsx\");\n  import.meta.hot.lastModified = \"1721258398561.1882\";\n}\n// REMIX HMR END\n\nimport { Card, CardContent, Typography, Link, Grid } from \"@mui/material\";\nexport default function Post({\n  posts\n}) {\n  return <Grid item xs={12} md={posts.id > 1 ? 6 : 12}>\r\n      <Card>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" component=\"div\">\r\n            <Link href={`/posts/${posts.slug}`} underline=\"none\">\r\n              {posts.title}\r\n            </Link>\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            {posts.subtitle}\r\n          </Typography>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            {posts.content}\r\n          </Typography>\r\n          <div>\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n              {posts.author}\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"textSecondary\" style={{\n            marginLeft: \"1rem\"\n          }}>\r\n              {posts.date}\r\n            </Typography>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>;\n}\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/posts.$slug.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/posts.$slug.tsx\");\n  import.meta.hot.lastModified = \"1721233537708.9482\";\n}\n// REMIX HMR END\n\nimport Post from \"~/components/Post\";\nimport { useLoaderData, useMatches } from \"@remix-run/react\";\nexport async function loader({\n  params\n}) {\n  const slug = params.slug;\n  return slug;\n}\nexport default function SinglePost() {\n  _s();\n  const slug = useLoaderData();\n  const matches = useMatches();\n  const posts = matches[1].data;\n  const post = posts.find(post => post.slug === slug);\n  if (!post) {\n    return <div>Post not found</div>;\n  }\n  return <Post posts={post} />;\n}\n_s(SinglePost, \"4xlTDE+S/2VB8UBZM2BvwhdgKxs=\", false, function () {\n  return [useLoaderData, useMatches];\n});\n_c = SinglePost;\nvar _c;\n$RefreshReg$(_c, \"SinglePost\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "post", "_c"]
}
