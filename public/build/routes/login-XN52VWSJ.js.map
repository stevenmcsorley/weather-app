{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/login.tsx\");\n  import.meta.hot.lastModified = \"1721395920689.7205\";\n}\n// REMIX HMR END\n\nimport { useState } from \"react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { useActionData, Form } from \"@remix-run/react\";\nimport { Container, TextField, Button, Typography } from \"@mui/material\";\nimport { getSession, commitSession } from \"../sessions\";\nimport prisma from \"../prismaClient\";\nimport bcrypt from \"bcryptjs\";\nexport const action = async ({\n  request\n}) => {\n  const form = await request.formData();\n  const username = form.get(\"username\");\n  const password = form.get(\"password\");\n  if (typeof username !== \"string\" || typeof password !== \"string\") {\n    return json({\n      error: \"Invalid form submission\"\n    });\n  }\n  try {\n    const user = await prisma.user.findUnique({\n      where: {\n        username\n      }\n    });\n    if (user && (await bcrypt.compare(password, user.password))) {\n      const session = await getSession(request.headers.get(\"Cookie\"));\n      session.set(\"userId\", user.id);\n      return redirect(\"/weather\", {\n        headers: {\n          \"Set-Cookie\": await commitSession(session)\n        }\n      });\n    }\n    return json({\n      error: \"Invalid username or password\"\n    });\n  } catch (error) {\n    console.error(\"Prisma error:\", error);\n    return json({\n      error: \"An error occurred. Please try again later.\"\n    });\n  }\n};\nexport default function Login() {\n  _s();\n  const actionData = useActionData();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  return <Container maxWidth=\"sm\">\r\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n        Login\r\n      </Typography>\r\n      <Form method=\"post\">\r\n        <TextField fullWidth label=\"Username\" name=\"username\" value={username} onChange={e => setUsername(e.target.value)} margin=\"normal\" inputProps={{\n        \"data-testid\": \"username-input\"\n      }} />\r\n        <TextField fullWidth label=\"Password\" name=\"password\" type=\"password\" value={password} onChange={e => setPassword(e.target.value)} margin=\"normal\" inputProps={{\n        \"data-testid\": \"password-input\"\n      }} />\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" data-testid=\"login-button\">\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {actionData?.error && <Typography color=\"error\" data-testid=\"error-message\">\r\n          {actionData.error}\r\n        </Typography>}\r\n    </Container>;\n}\n_s(Login, \"MICnmMz6wmQFumyKZiGAc4r5wWg=\", false, function () {\n  return [useActionData];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,mBAAyB;AACzB,kBAA+B;AAK/B,sBAAmB;AA2Cb;AArEN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2BAA6B,EAAE;AAAA,EACxE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsB;AACtB,cAAY,IAAI,eAAe;AACjC;AA8Ce,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,EAAE;AAC3C,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,EAAE;AAC3C,SAAO,mDAAC,qBAAU,UAAS,MACvB;AAAA,uDAAC,sBAAW,SAAQ,MAAK,WAAU,MAAK,cAAY,MAAC,qBAArD;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACA,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,qBAAU,WAAS,MAAC,OAAM,YAAW,MAAK,YAAW,OAAO,UAAU,UAAU,OAAK,YAAY,EAAE,OAAO,KAAK,GAAG,QAAO,UAAS,YAAY;AAAA,QAC/I,eAAe;AAAA,MACjB,KAFE;AAAA;AAAA;AAAA;AAAA,aAEC;AAAA,MACD,mDAAC,qBAAU,WAAS,MAAC,OAAM,YAAW,MAAK,YAAW,MAAK,YAAW,OAAO,UAAU,UAAU,OAAK,YAAY,EAAE,OAAO,KAAK,GAAG,QAAO,UAAS,YAAY;AAAA,QAC/J,eAAe;AAAA,MACjB,KAFE;AAAA;AAAA;AAAA;AAAA,aAEC;AAAA,MACD,mDAAC,kBAAO,MAAK,UAAS,SAAQ,aAAY,OAAM,WAAU,eAAY,gBAAe,qBAArF;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SATF;AAAA;AAAA;AAAA;AAAA,WAUA;AAAA,KACC,yCAAY,UAAS,mDAAC,sBAAW,OAAM,SAAQ,eAAY,iBACvD,qBAAW,SADM;AAAA;AAAA;AAAA;AAAA,WAEpB;AAAA,OAjBC;AAAA;AAAA;AAAA;AAAA,SAkBL;AACJ;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
